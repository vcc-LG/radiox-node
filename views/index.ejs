<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Radio X Playlists</title>
    <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.3/angular.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.3/angular-route.min.js"></script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>

    <style>

        body {
            font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
            width: 960px;
            height: 500px;
            position: relative;
        }

        svg {
            width: 100%;
            height: 100%;
            position: center;
        }

        .toolTip {
            font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
            position: absolute;
            display: none;
            width: auto;
            height: auto;
            background: none repeat scroll 0 0 white;
            border: 0 none;
            border-radius: 8px 8px 8px 8px;
            box-shadow: -3px 3px 15px #888888;
            color: black;
            font: 12px sans-serif;
            padding: 5px;
            text-align: center;
        }

        text {
            font: 10px sans-serif;
            color: white;
        }
        text.value {
            font-size: 120%;
            fill: white;
        }

        .axisHorizontal path{
            fill: none;
        }

        .axisHorizontal .tick line {
            stroke-width: 1;
            stroke: rgba(0, 0, 0, 0.2);
        }

        .bar {
            fill: steelblue;
            fill-opacity: .9;
        }

    </style>

</head>

<body>
    <div>
        <div>
            <nav class="navbar navbar-inverse" role="navigation" style="padding-left:130px;">
                <ul class="nav navbar-nav">
                    <li class="active"><a href="/">Home<span class="sr-only">(current)</span></a></li>
                    <li><a href="/about">About</a></li>
                </ul>
            </nav>
        </div>
        <br/>
        <div class="jumbotron">
            <h1>
Radio X Is Boring</h1></div>
    </div>

    <div id="graph"></div>

    <script src="http://d3js.org/d3.v3.min.js"></script>

    <script>
        var data = <%- JSON.stringify(vals.year_count) %>;

        var margin = {
                top: 20,
                right: 20,
                bottom: 70,
                left: 40
            },
            width = 1500 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        // Parse the date / time
        var parseDate = d3.time.format("%Y").parse;

        // var x = d3.time.scale()range([0, width]);
        var x = d3.scale.ordinal().rangeRoundBands([0, width], .05);

        var y = d3.scale.linear().range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .tickFormat(d3.time.format("%Y"));

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .ticks(10);

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        data.forEach(function(d) {
            d._id = parseDate(d._id);
            d.count = +d.count;
        });

        x.domain(data.map(function(d) {
            return d._id;
        }));
        y.domain([0, d3.max(data, function(d) {
            return d.count;
        })]);

        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis)
            .selectAll("text")
            .style("text-anchor", "end")
            .attr("dx", "-.8em")
            .attr("dy", "-.55em")
            .attr("transform", "rotate(-90)");

        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis)
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", ".71em")
            .style("text-anchor", "end")
            .text("Count");

        svg.selectAll("bar")
            .data(data)
            .enter().append("rect")
            .style("fill", "steelblue")
            .attr("x", function(d) {
                return x(d._id);
            })
            .attr("width", x.rangeBand())
            .attr("y", function(d) {
                return y(d.count);
            })
            .attr("height", function(d) {
                return height - y(d.count);
            });
    </script>

    <script>
        var song_data = <%- JSON.stringify(vals.song_count) %>;
        console.log(song_data);

        var div = d3.select("body").append("div").attr("class", "toolTip");

        var axisMargin = 20,
                margin = 40,
                valueMargin = 4,
                width = parseInt(d3.select('body').style('width'), 10),
                height = parseInt(d3.select('body').style('height'), 10),
                barHeight = (height-axisMargin-margin*2)* 0.4/song_data.length,
                barPadding = (height-axisMargin-margin*2)*0.6/song_data.length,
                data, bar, svg, scale, xAxis, labelWidth = 0;

        max = d3.max(song_data, function(d) { return d.count; });

        svg = d3.select('body')
                .append("svg")
                .attr("width", width)
                .attr("height", height);


        bar = svg.selectAll("g")
                .data(song_data)
                .enter()
                .append("g");

        bar.attr("class", "bar")
                .attr("cx",0)
                .attr("transform", function(d, i) {
                    return "translate(" + margin + "," + (i * (barHeight + barPadding) + barPadding) + ")";
                });

        bar.append("text")
                .attr("class", "label")
                .attr("y", barHeight / 2)
                .attr("dy", ".35em") //vertical align middle
                .text(function(d){
                    return d._id;
                }).each(function() {
            labelWidth = Math.ceil(Math.max(labelWidth, this.getBBox().width));
        });

        scale = d3.scale.linear()
                .domain([0, max])
                .range([0, width - margin*2 - labelWidth]);

        xAxis = d3.svg.axis()
                .scale(scale)
                .tickSize(-height + 2*margin + axisMargin)
                .orient("bottom");

        bar.append("rect")
                .attr("transform", "translate("+labelWidth+", 0)")
                .attr("height", barHeight)
                .attr("width", function(d){
                    return scale(d.count);
                });

        bar.append("text")
                .attr("class", "value")
                .attr("y", barHeight / 2)
                .attr("dx", -valueMargin + labelWidth) //margin right
                .attr("dy", ".35em") //vertical align middle
                .attr("text-anchor", "end")
                .text(function(d){
                    return (d.count);
                })
                .attr("x", function(d){
                    var width = this.getBBox().width;
                    return Math.max(width + valueMargin, scale(d.count));
                });

        bar
                .on("mousemove", function(d){
                    div.style("left", d3.event.pageX+10+"px");
                    div.style("top", d3.event.pageY-25+"px");
                    div.style("display", "inline-block");
                    div.html((d._id)+"<br>"+(d.count));
                });
        bar
                .on("mouseout", function(d){
                    div.style("display", "none");
                });

        svg.insert("g",":first-child")
                .attr("class", "axisHorizontal")
                .attr("transform", "translate(" + (margin + labelWidth) + ","+ (height - axisMargin - margin)+")")
                .call(xAxis);

    </script>


</body>

</html>
